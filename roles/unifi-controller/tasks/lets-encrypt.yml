---

- name: install software-properties-common (ppa dependency)
  apt:
    name: software-properties-common
    state: present
    update_cache: yes
    cache_valid_time: "{{ apt_cache_valid_time }}"

- name: add apt ppa required for certbot
  apt_repository:
    repo: 'ppa:certbot/certbot'

- name: install certbot
  apt:
    name: certbot
    state: present
    update_cache: yes
    cache_valid_time: "{{ apt_cache_valid_time }}"

# Runs using letsencrypt's "deploy_hook" functionality, to format the certificate for the Unifi Controller,
# import the certificate, and then restart the Unifi Controller
- name: copy certificate installation script
  template:
    src: unifi_deploy_hook.sh.j2
    dest: /etc/letsencrypt/renewal-hooks/deploy/unifi_deploy_hook.sh
    owner: root
    group: root
    mode: 0500

# Helper script in case we need to debug certificates, allows easy purging of certificate from letsencrypt dir.
- name: copy purge certificate utility script for debugging
  template:
    src: purge_certificate.sh.j2
    dest: /root/purge_certificate.sh
    owner: root
    group: root
    mode: 0500

# If this is the first runthrough, the cert directory doesn't exist yet.
- name: check if live cert directory exists
  stat: path=/etc/letsencrypt/live/{{ fqdn }}/fullchain.pem
  register: cert_file

# Better to fail fast here, rather than later when actually trying to get a certificate
- name: perform test dns lookup of {{ fqdn }}
  command: dig {{ fqdn }} +short
  changed_when: false
  register: fqdn_dns_result

- name: fail if dns lookup of {{ fqdn }} is not {{ public_ip }}
  fail:
    msg: dns lookup of {{ fqdn }} was not equal to {{ public_ip }}, got '{{ fqdn_dns_result.stdout }}' instead
  when: fqdn_dns_result.stdout != public_ip

# Note: Add "--test-cert" to this command to test using Let's Encrypt staging server instead (no rate limit).
- name: get initial letsencrypt certificate for {{ fqdn }}
  command: certbot certonly -n -d {{ fqdn }} -m {{ letsencrypt_email }} --agree-tos --standalone
  when: cert_file.stat.exists == False
  notify: run letsencrypt deploy hook
